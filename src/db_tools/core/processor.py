# src/db_tools/core/processor.py

import random
from typing import Any, Dict, List

from rich import print
from rich.progress import track
from sqlalchemy import MetaData, Table, engine, insert, inspect, select, update

from db_tools.core import faker_manager


def _seed_table(
    db_engine: engine.Engine,
    connection, # SQLAlchemy connection object
    table_name: str,
    table_config: Dict[str, Any],
    seeded_pks: Dict[str, List[Any]], # Dictionary ch·ª©a c√°c PK ƒë√£ ƒë∆∞·ª£c seed
) -> None:
    """H√†m n·ªôi b·ªô ƒë·ªÉ seed d·ªØ li·ªáu cho m·ªôt b·∫£ng duy nh·∫•t."""
    metadata = MetaData()
    inspector = inspect(db_engine)

    if not inspector.has_table(table_name):
        print(f"[bold red]‚ùå Error: Table '{table_name}' does not exist.[/bold red]")
        return

    table = Table(table_name, metadata, autoload_with=db_engine)
    count = table_config.get("count", 10)
    columns_to_fake = table_config.get("columns", {})
    relations_config = table_config.get("relations", {})

    print(f"   - Generating {count} records for [bold magenta]'{table_name}'[/bold magenta]...")
    data_to_insert = []
    for _ in track(range(count), description=f"Generating for '{table_name}'..."):
        # T·∫°o d·ªØ li·ªáu gi·∫£ t·ª´ Faker
        row_data = faker_manager.generate_fake_row(columns_to_fake)

        # X·ª≠ l√Ω c√°c m·ªëi quan h·ªá
        for fk_column, rel_info in relations_config.items():
            related_table = rel_info.get("table")
            if related_table in seeded_pks and seeded_pks[related_table]:
                # L·∫•y ng·∫´u nhi√™n m·ªôt PK t·ª´ danh s√°ch c√°c PK c·ªßa b·∫£ng cha
                row_data[fk_column] = random.choice(seeded_pks[related_table])

        data_to_insert.append(row_data)

    if data_to_insert:
        print(f"   - Inserting records into [bold magenta]'{table_name}'[/bold magenta]...")
        # S·ª≠ d·ª•ng `returning` ƒë·ªÉ l·∫•y l·∫°i c√°c gi√° tr·ªã PK v·ª´a ƒë∆∞·ª£c insert
        stmt = insert(table).returning(table.primary_key.columns.values()[0])
        result = connection.execute(stmt, data_to_insert)
        
        # L∆∞u l·∫°i c√°c PK m·ªõi ƒë∆∞·ª£c t·∫°o
        new_pks = result.scalars().all()
        seeded_pks[table_name] = new_pks
        
        print(f"[bold green]‚úÖ Seeded {len(new_pks)} records into '{table_name}' successfully![/bold green]")


def process_seed(config: Dict[str, Any], db_engine: engine.Engine):
    """H√†m ch√≠nh ƒëi·ªÅu ph·ªëi to√†n b·ªô qu√° tr√¨nh seeding."""
    seed_config = config.get("seed")
    if not seed_config:
        print("[yellow]No 'seed' configuration found. Skipping.[/yellow]")
        return

    print("\n[bold cyan]üå± Starting relational data seeding process...[/bold cyan]")
    
    # Dictionary ƒë·ªÉ l∆∞u tr·ªØ c√°c primary key ƒë√£ ƒë∆∞·ª£c t·∫°o ra
    # V√≠ d·ª•: {'users': [1, 2, 3], 'products': [101, 102]}
    seeded_primary_keys: Dict[str, List[Any]] = {}

    with db_engine.connect() as connection:
        # L·∫∑p qua c√°c b·∫£ng theo ƒë√∫ng th·ª© t·ª± trong file config
        for table_name, table_config in seed_config.items():
            try:
                _seed_table(db_engine, connection, table_name, table_config, seeded_primary_keys)
            except Exception as e:
                print(f"[bold red]‚ùå An error occurred with table '{table_name}': {repr(e)}[/bold red]")
                # D·ª´ng l·∫°i n·∫øu c√≥ l·ªói ƒë·ªÉ ƒë·∫£m b·∫£o to√†n v·∫πn d·ªØ li·ªáu
                connection.rollback()
                return
        
        # Commit transaction cu·ªëi c√πng n·∫øu t·∫•t c·∫£ th√†nh c√¥ng
        connection.commit()
        print("\n[bold green]üéâ All tables seeded successfully![/bold green]")


def process_anonymize(config: Dict[str, Any], db_engine: engine.Engine):
    # H√†m n√†y gi·ªØ nguy√™n kh√¥ng ƒë·ªïi
    anonymize_config = config.get("anonymize")
    if not anonymize_config:
        print("[yellow]No 'anonymize' configuration found. Skipping.[/yellow]")
        return

    print("\n[bold cyan]üé≠ Starting data anonymization process...[/bold cyan]")
    metadata = MetaData()
    inspector = inspect(db_engine)

    with db_engine.connect() as connection:
        for table_name, table_config in anonymize_config.items():
            try:
                if not inspector.has_table(table_name):
                    print(f"[bold red]‚ùå Error: Table '{table_name}' does not exist in the database.[/bold red]")
                    continue

                table = Table(table_name, metadata, autoload_with=db_engine)
                primary_key_col = table.primary_key.columns.values()[0]
                p_keys = connection.execute(select(primary_key_col)).scalars().all()
                
                if not p_keys:
                    print(f"[yellow]   - No records found in '{table_name}'. Skipping.[/yellow]")
                    continue

                columns_to_anonymize = table_config.get("columns", {})
                
                print(f"   - Anonymizing {len(p_keys)} records...")
                
                for pk_value in track(p_keys, description=f"Anonymizing '{table_name}'..."):
                    new_fake_data = faker_manager.generate_fake_row(columns_to_anonymize)
                    stmt = (
                        update(table)
                        .where(primary_key_col == pk_value)
                        .values(**new_fake_data)
                    )
                    connection.execute(stmt)
                
                connection.commit()
                print(f"[bold green]‚úÖ Anonymized {len(p_keys)} records in '{table_name}' successfully![/bold green]")

            except Exception as e:
                print(f"[bold red]‚ùå An error occurred with table '{table_name}': {repr(e)}[/bold red]")