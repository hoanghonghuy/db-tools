# src/db_tools/core/processor.py

from typing import Any, Dict

from faker import Faker
from rich import print
from rich.progress import track
from sqlalchemy import MetaData, Table, engine, insert


# Kh·ªüi t·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng Faker duy nh·∫•t ƒë·ªÉ t√°i s·ª≠ d·ª•ng
faker = Faker()

def _generate_fake_data(columns: Dict[str, str]) -> Dict[str, Any]:
    """T·∫°o m·ªôt d√≤ng d·ªØ li·ªáu gi·∫£ d·ª±a tr√™n c·∫•u h√¨nh c·ªôt."""
    row_data = {}
    for col_name, faker_provider in columns.items():
        # getattr(faker, 'name')() s·∫Ω t∆∞∆°ng ƒë∆∞∆°ng v·ªõi faker.name()
        # ƒê√¢y l√† c√°ch g·ªçi h√†m c·ªßa Faker m·ªôt c√°ch linh ƒë·ªông t·ª´ t√™n provider (string)
        if hasattr(faker, faker_provider):
            row_data[col_name] = getattr(faker, faker_provider)()
        else:
            # B·ªè qua n·∫øu provider kh√¥ng h·ª£p l·ªá, ho·∫∑c c√≥ th·ªÉ in c·∫£nh b√°o
            print(f"[yellow]Warning: Faker provider '{faker_provider}' not found for column '{col_name}'. Skipping.[/yellow]")
    return row_data


def process_seed(config: Dict[str, Any], db_engine: engine.Engine):
    """
    Th·ª±c thi t√°c v·ª• seeding d·ªØ li·ªáu.
    """
    seed_config = config.get("seed")
    if not seed_config:
        print("[yellow]No 'seed' configuration found in db_tools.yml. Skipping.[/yellow]")
        return

    print("\n[bold cyan]üå± Starting data seeding process...[/bold cyan]")
    metadata = MetaData()

    with db_engine.connect() as connection:
        for table_name, table_config in seed_config.items():
            try:
                # 1. D√πng SQLAlchemy ƒë·ªÉ "soi" c·∫•u tr√∫c c·ªßa b·∫£ng t·ª´ database
                print(f"   - Reflecting table structure for [bold magenta]'{table_name}'[/bold magenta]...")
                table = Table(table_name, metadata, autoload_with=db_engine)

                count = table_config.get("count", 10)
                columns_to_fake = table_config.get("columns", {})
                
                # 2. T·∫°o danh s√°ch d·ªØ li·ªáu gi·∫£
                print(f"   - Generating {count} fake records...")
                data_to_insert = []
                # D√πng track c·ªßa Rich ƒë·ªÉ c√≥ progress bar ƒë·∫πp m·∫Øt
                for _ in track(range(count), description=f"Generating for '{table_name}'..."):
                    fake_row = _generate_fake_data(columns_to_fake)
                    data_to_insert.append(fake_row)

                # 3. Insert to√†n b·ªô d·ªØ li·ªáu v√†o b·∫£ng trong m·ªôt l·∫ßn
                if data_to_insert:
                    print(f"   - Inserting records into [bold magenta]'{table_name}'[/bold magenta]...")
                    stmt = insert(table)
                    connection.execute(stmt, data_to_insert)
                    connection.commit() # Commit transaction
                    print(f"[bold green]‚úÖ Seeded {len(data_to_insert)} records into '{table_name}' successfully![/bold green]")

            except Exception as e:
                print(f"[bold red]‚ùå An error occurred with table '{table_name}': {e}[/bold red]")